"""Initial schema with multi-tenant support

Revision ID: b2bf66d13783
Revises: 
Create Date: 2025-10-04 01:14:50.719513

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'b2bf66d13783'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tenants',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('domain', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_tenants_domain'), 'tenants', ['domain'], unique=True)
    op.create_index(op.f('ix_tenants_id'), 'tenants', ['id'], unique=False)
    op.create_index(op.f('ix_tenants_name'), 'tenants', ['name'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('full_name', sa.String(length=255), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_superuser', sa.Boolean(), nullable=True),
    sa.Column('tenant_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_table('analyses',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('upload_id', sa.Integer(), nullable=False),
    sa.Column('summary', sa.JSON(), nullable=True),
    sa.Column('insights', sa.JSON(), nullable=True),
    sa.Column('anomaly_count', sa.Integer(), nullable=True),
    sa.Column('forecast_data', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['upload_id'], ['uploads.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_analyses_id'), 'analyses', ['id'], unique=False)
    op.create_table('pipeline_histories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('upload_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('message', sa.Text(), nullable=True),
    sa.Column('execution_time', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.ForeignKeyConstraint(['upload_id'], ['uploads.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_pipeline_histories_id'), 'pipeline_histories', ['id'], unique=False)
    op.create_index(op.f('ix_pipeline_histories_status'), 'pipeline_histories', ['status'], unique=False)
    op.drop_index(op.f('idx_pipeline_history_created_at'), table_name='pipeline_history')
    op.drop_index(op.f('idx_pipeline_history_status'), table_name='pipeline_history')
    op.drop_index(op.f('idx_pipeline_history_upload_id'), table_name='pipeline_history')
    op.drop_table('pipeline_history')
    op.drop_index(op.f('idx_analysis_upload_id'), table_name='analysis')
    op.drop_table('analysis')
    # Create default tenant first
    op.execute("INSERT INTO tenants (name, domain, is_active) VALUES ('Default Tenant', 'default', true)")
    
    # Create default user
    op.execute("""
        INSERT INTO users (email, hashed_password, full_name, is_active, is_superuser, tenant_id) 
        VALUES ('admin@default.com', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LeOKe7CgKzYgYgYgY', 'Admin User', true, true, 1)
    """)
    
    op.add_column('uploads', sa.Column('file_size', sa.Integer(), nullable=True))
    op.add_column('uploads', sa.Column('mime_type', sa.String(length=100), nullable=True))
    op.add_column('uploads', sa.Column('tenant_id', sa.Integer(), nullable=True))
    op.add_column('uploads', sa.Column('user_id', sa.Integer(), nullable=True))
    
    # Update existing uploads with default tenant and user
    op.execute("UPDATE uploads SET tenant_id = 1 WHERE tenant_id IS NULL")
    op.execute("UPDATE uploads SET user_id = 1 WHERE user_id IS NULL")
    
    # Now make them NOT NULL
    op.alter_column('uploads', 'tenant_id', nullable=False)
    op.alter_column('uploads', 'user_id', nullable=False)
    op.alter_column('uploads', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('uploads', 'updated_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_index(op.f('idx_uploads_created_at'), table_name='uploads')
    op.drop_index(op.f('idx_uploads_status'), table_name='uploads')
    op.create_index(op.f('ix_uploads_id'), 'uploads', ['id'], unique=False)
    op.create_index(op.f('ix_uploads_status'), 'uploads', ['status'], unique=False)
    op.create_foreign_key(None, 'uploads', 'tenants', ['tenant_id'], ['id'])
    op.create_foreign_key(None, 'uploads', 'users', ['user_id'], ['id'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'uploads', type_='foreignkey')
    op.drop_constraint(None, 'uploads', type_='foreignkey')
    op.drop_index(op.f('ix_uploads_status'), table_name='uploads')
    op.drop_index(op.f('ix_uploads_id'), table_name='uploads')
    op.create_index(op.f('idx_uploads_status'), 'uploads', ['status'], unique=False)
    op.create_index(op.f('idx_uploads_created_at'), 'uploads', ['created_at'], unique=False)
    op.alter_column('uploads', 'updated_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.alter_column('uploads', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=True,
               existing_server_default=sa.text('CURRENT_TIMESTAMP'))
    op.drop_column('uploads', 'user_id')
    op.drop_column('uploads', 'tenant_id')
    op.drop_column('uploads', 'mime_type')
    op.drop_column('uploads', 'file_size')
    op.create_table('analysis',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('upload_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('summary', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('insights', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['upload_id'], ['uploads.id'], name=op.f('analysis_upload_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('analysis_pkey'))
    )
    op.create_index(op.f('idx_analysis_upload_id'), 'analysis', ['upload_id'], unique=False)
    op.create_table('pipeline_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('upload_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('CURRENT_TIMESTAMP'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['upload_id'], ['uploads.id'], name=op.f('pipeline_history_upload_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pipeline_history_pkey'))
    )
    op.create_index(op.f('idx_pipeline_history_upload_id'), 'pipeline_history', ['upload_id'], unique=False)
    op.create_index(op.f('idx_pipeline_history_status'), 'pipeline_history', ['status'], unique=False)
    op.create_index(op.f('idx_pipeline_history_created_at'), 'pipeline_history', ['created_at'], unique=False)
    op.drop_index(op.f('ix_pipeline_histories_status'), table_name='pipeline_histories')
    op.drop_index(op.f('ix_pipeline_histories_id'), table_name='pipeline_histories')
    op.drop_table('pipeline_histories')
    op.drop_index(op.f('ix_analyses_id'), table_name='analyses')
    op.drop_table('analyses')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_tenants_name'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_id'), table_name='tenants')
    op.drop_index(op.f('ix_tenants_domain'), table_name='tenants')
    op.drop_table('tenants')
    # ### end Alembic commands ###
